results_wald$length <- results_wald$upper - results_wald$lower
# Wyświetl interesujące kolumny
print(results_cp[c("x", "lower", "upper", "length")])
print(results_wilson[c("x", "lower", "upper", "length")])
print(results_wald[c("x", "lower", "upper", "length")])
testuj_hipoteze_multinomial <- function(x, p0) {
# Dane wejściowe:
# x  - wektor obserwacji (liczności)
# p0 - wektor hipotetycznych prawdopodobieństw
n <- sum(x)
k <- length(x)
expected <- n * p0
chisq_stat <- sum((x - expected)^2 / expected)
pval_chisq <- 1 - pchisq(chisq_stat, df = k - 1)
nonzero <- x > 0
g2_stat <- 2 * sum(x[nonzero] * log(x[nonzero] / expected[nonzero]))
pval_g2 <- 1 - pchisq(g2_stat, df = k - 1)
result <- data.frame(
Test = c("Chi-kwadrat Pearsona",
"Chi-kwadrat największej wiarygodności"),
Statystyka = round(c(chisq_stat, g2_stat), 4),
P_value = round(c(pval_chisq, pval_g2), 4)
)
return(result)
}
x <- c(14, 17, 40, 30, 29)
p0 <- rep(0.2, 5)
testuj_hipoteze_multinomial(x, p0)
df <- read.csv("ankieta.csv", sep = ";", fileEncoding = "Latin2")
colnames(df) <- c('DZIAŁ','STAŻ','CZY_KIER', 'PYT_1',
'PYT_2', 'PYT_3', 'PŁEĆ', 'WIEK')
attach(df)
df_prod <- subset(df, DZIAŁ == "PD")
x <- table(df_prod$PYT_1)
x <- as.numeric(x)
p0 <- rep(1/length(x), length(x))
testuj_hipoteze_multinomial(x, p0)
df_prod <- subset(df, DZIAŁ == "PD")
x <- table(df_prod$PYT_1)
x <- as.numeric(x)
p0 <- c(0.2, 0.2, 0.2, 0.2, 0.2)
testuj_hipoteze_multinomial(x, p0)
df_prod <- subset(df, DZIAŁ == "PD")
x <- table(df_prod$PYT_1)
x <- as.numeric(x)
p0 <- c(0.2, 0.2, 0.2, 0.2, 0.2)
print(x)
#testuj_hipoteze_multinomial(x, p0)
counts_pyt1 <- tabulate(PYT_1 + 3, nbins = 5)
df_prod <- subset(df, DZIAŁ == "PD")
x <- table(df_prod$PYT_1)
x <- as.numeric(x)
p0 <- c(0.2, 0.2, 0.2, 0.2, 0.2)
print(x)
testuj_hipoteze_multinomial(x, p0)
testuj_hipoteze_multinomial <- function(x, p0, alpha = 0.05) {
# Dane wejściowe:
# x     - wektor obserwacji (liczności)
# p0    - wektor hipotetycznych prawdopodobieństw
# alpha - poziom istotności
n <- sum(x)
k <- length(x)
expected <- n * p0
df <- k - 1
# Statystyka testu chi-kwadrat Pearsona
chisq_stat <- sum((x - expected)^2 / expected)
pval_chisq <- 1 - pchisq(chisq_stat, df = df)
# Statystyka G² (największej wiarygodności)
nonzero <- x > 0
g2_stat <- 2 * sum(x[nonzero] * log(x[nonzero] / expected[nonzero]))
pval_g2 <- 1 - pchisq(g2_stat, df = df)
# Wartość krytyczna
critical_value <- qchisq(1 - alpha, df = df)
result <- data.frame(
Test = c("Chi-kwadrat Pearsona",
"Chi-kwadrat największej wiarygodności"),
Statystyka = round(c(chisq_stat, g2_stat), 4),
Wartosc_krytyczna = round(critical_value, 4),
P_value = round(c(pval_chisq, pval_g2), 4)
)
return(result)
}
# Przykład użycia:
x <- c(14, 17, 40, 30, 29)
p0 <- rep(0.2, 5)
testuj_hipoteze_multinomial(x, p0)
df <- read.csv("ankieta.csv", sep = ";", fileEncoding = "Latin2")
colnames(df) <- c('DZIAŁ','STAŻ','CZY_KIER', 'PYT_1',
'PYT_2', 'PYT_3', 'PŁEĆ', 'WIEK')
attach(df)
df_prod <- subset(df, DZIAŁ == "PD")
x <- table(df_prod$PYT_1)
x <- as.numeric(x)
p0 <- c(0.2, 0.2, 0.2, 0.2, 0.2)
print(x)
testuj_hipoteze_multinomial(x, p0)
pv_chikwadrat = function (x, p0, test, alpha) {
k <- length(x)
n <- sum(x)
stat <- 0
if (test == "pearson") {
for (i in 1:k) {
stat <- stat + (x[i]-n*p0[i])^2/(n*p0[i])
}
}
else if (test == "iw") {
for (i in 1:k) {
stat <- stat + x[i]*log(x[i]/(n*p0[i]))
}
stat <- 2*stat
}
p_val <- 1 - pchisq(stat, k-1)
crit_val <- qchisq(1 - alpha, df = k - 1)
return(c(stat, p_val, crit_val))
}
x <- c(14, 17, 40, 30, 29)
p0 <- rep(0.2, 5)
pv_chikwadrat(x, p0,'pearson',0.05)
x <- c(14, 17, 40, 30, 29)
p0 <- rep(0.2, 5)
pv_chikwadrat(x, p0,'iw',0.05)
if (!require(knitr)) install.packages("knitr")
if (!require(readr)) install.packages("readr")
if (!require(latex2exp)) install.packages("latex2exp")
if (!require(dplyr)) install.packages("dplyr")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(vctrs)) install.packages("vctrs")
if (!require(tidyr)) install.packages("tidyr")
if (!require(xtable)) install.packages("xtable")
if (!require(binom)) install.packages("binom")
if (!require(energy)) install.packages("energy")
if (!require(DescTools)) install.packages("DescTools")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "", fig.align = "center")
# Dane zbiorcze
all <- matrix(c(117, 104, 177, 44), nrow = 2, byrow = TRUE)
colnames(all) <- c("Poprawa", "Brak")
rownames(all) <- c("Leczenie_A", "Leczenie_B")
# Dane dla pacjentów z chorobami współistniejącymi
with_comorbidities <- matrix(c(17, 101, 2, 36), nrow = 2, byrow = TRUE)
colnames(with_comorbidities) <- c("Poprawa", "Brak")
rownames(with_comorbidities) <- c("Leczenie_A", "Leczenie_B")
# Dane dla pacjentów bez chorób współistniejących
without_comorbidities <- matrix(c(100, 3, 175, 8), nrow = 2, byrow = TRUE)
colnames(without_comorbidities) <- c("Poprawa", "Brak")
rownames(without_comorbidities) <- c("Leczenie_A", "Leczenie_B")
# Funkcja do obliczania skuteczności
effectiveness <- function(data) {
prop <- data[, "Poprawa"] / rowSums(data)
return(round(prop, 3))
}
# Skuteczność leczenia
eff_all <- effectiveness(all)
eff_with_com <- effectiveness(with_comorbidities)
eff_without_com <- effectiveness(without_comorbidities)
# Wyświetlenie wyników
cat("Skuteczność - cała grupa:\n")
print(eff_all)
cat("\nSkuteczność - z chorobami współistniejącymi:\n")
print(eff_with_com)
cat("\nSkuteczność - bez chorób współistniejących:\n")
print(eff_without_com)
# Dane
all <- matrix(c(117, 104, 177, 44), nrow = 2, byrow = TRUE,
dimnames = list(c("Leczenie A", "Leczenie B"), c("Poprawa", "Brak")))
with_comorb <- matrix(c(17, 101, 2, 36), nrow = 2, byrow = TRUE,
dimnames = list(c("Leczenie A", "Leczenie B"), c("Poprawa", "Brak")))
without_comorb <- matrix(c(100, 3, 175, 8), nrow = 2, byrow = TRUE,
dimnames = list(c("Leczenie A", "Leczenie B"), c("Poprawa", "Brak")))
# Funkcja do obliczania skuteczności
effectiveness <- function(data) {
round(data[, "Poprawa"] / rowSums(data), 3)
}
# Wyniki
eff_all <- effectiveness(all)
eff_with <- effectiveness(with_comorb)
eff_without <- effectiveness(without_comorb)
eff_all
eff_with
eff_without
# Zakładamy, że dane masz w ramce danych `dane`
# zmienne: CZY_KIER, PYT_2, STAZ
dane<- read.csv("ankieta.csv", sep = ";", fileEncoding = "Latin2")
colnames(dane) <- c('DZIAŁ','STAŻ','CZY_KIER', 'PYT_1',
'PYT_2', 'PYT_3', 'PŁEĆ', 'WIEK')
# Tworzymy tabelę kontyngencji 3D
tablica <- xtabs(~ CZY_KIER + PYT_2 + STAZ, data = dane)
# Zakładamy, że dane masz w ramce danych `dane`
# zmienne: CZY_KIER, PYT_2, STAZ
# Wczytanie danych
dane <- read.csv("ankieta.csv", sep = ";", fileEncoding = "Latin2")
colnames(dane) <- c('DZIAŁ','STAŻ','CZY_KIER', 'PYT_1', 'PYT_2', 'PYT_3', 'PŁEĆ', 'WIEK')
# Tabela kontyngencji 3D
tablica <- xtabs(~ CZY_KIER + PYT_2 + STAZ, data = dane)
# Zakładamy, że dane masz w ramce danych `dane`
# zmienne: CZY_KIER, PYT_2, STAZ
# Wczytanie danych
dane <- read.csv("ankieta.csv", sep = ";", fileEncoding = "Latin2")
colnames(dane) <- c('DZIAŁ','STAŻ','CZY_KIER', 'PYT_1', 'PYT_2', 'PYT_3', 'PŁEĆ', 'WIEK')
# Tabela kontyngencji 3D
tablica <- xtabs(~ CZY_KIER + PYT_2 + STAŻ, data = dane)
# Modele log-liniowe
library(MASS)
model_names <- c("[1 3]", "[13]", "[1 2 3]", "[12 3]", "[12 13]", "[1 23]")
formulas <- list(
~ CZY_KIER + STAZ,
~ CZY_KIER + STAZ + CZY_KIER:STAZ,
~ CZY_KIER * PYT_2 * STAZ,
~ CZY_KIER * PYT_2 + STAZ,
~ CZY_KIER * PYT_2 + CZY_KIER * STAZ,
~ CZY_KIER + PYT_2 * STAZ + CZY_KIER:STAZ
)
# Dopasowanie modeli
results <- data.frame(Model = model_names, Deviance = NA, DF = NA, p_value = NA)
for (i in seq_along(formulas)) {
fit <- loglm(formulas[[i]], data = tablica)
results$Deviance[i] <- round(fit$deviance, 2)
results$DF[i] <- fit$df
results$p_value[i] <- round(pchisq(fit$deviance, df = fit$df, lower.tail = FALSE), 4)
}
# Zakładamy, że dane masz w ramce danych `dane`
# zmienne: CZY_KIER, PYT_2, STAZ
# Wczytanie danych
dane <- read.csv("ankieta.csv", sep = ";", fileEncoding = "Latin2")
colnames(dane) <- c('DZIAŁ','STAŻ','CZY_KIER', 'PYT_1', 'PYT_2', 'PYT_3', 'PŁEĆ', 'WIEK')
# Tabela kontyngencji 3D
tablica <- xtabs(~ CZY_KIER + PYT_2 + STA, data = dane)
# Zakładamy, że dane masz w ramce danych `dane`
# zmienne: CZY_KIER, PYT_2, STAZ
# Wczytanie danych
dane <- read.csv("ankieta.csv", sep = ";", fileEncoding = "Latin2")
colnames(dane) <- c('DZIAŁ','STAZ','CZY_KIER', 'PYT_1', 'PYT_2', 'PYT_3', 'PŁEĆ', 'WIEK')
# Tabela kontyngencji 3D
tablica <- xtabs(~ CZY_KIER + PYT_2 + STAZ, data = dane)
dimnames(tablica)
# Zakładamy, że dane masz w ramce danych `dane`
# zmienne: CZY_KIER, PYT_2, STAZ
# Wczytanie danych
dane <- read.csv("ankieta.csv", sep = ";", fileEncoding = "Latin2")
colnames(dane) <- c('DZIAŁ','STAZ','CZY_KIER', 'PYT_1', 'PYT_2', 'PYT_3', 'PŁEĆ', 'WIEK')
# Tabela kontyngencji 3D
tablica <- xtabs(~ CZY_KIER + PYT_2 + STAZ, data = dane)
dimnames(tablica)
names(dimnames(tablica))
# powinno zwrócić: "CZY_KIER" "PYT_2" "STAZ"
# Zakładamy, że dane masz w ramce danych `dane`
# zmienne: CZY_KIER, PYT_2, STAZ
# Wczytanie danych
dane <- read.csv("ankieta.csv", sep = ";", fileEncoding = "Latin2")
colnames(dane) <- c('DZIAŁ','STAZ','CZY_KIER', 'PYT_1', 'PYT_2', 'PYT_3', 'PŁEĆ', 'WIEK')
# Tabela kontyngencji 3D
tablica <- xtabs(~ CZY_KIER + PYT_2 + STAZ, data = dane)
# powinno zwrócić: "CZY_KIER" "PYT_2" "STAZ"
library(MASS)
# Lista nazw i formuł modeli log-liniowych
model_names <- c("[1 3]", "[13]", "[1 2 3]", "[12 3]", "[12 13]", "[1 23]")
formulas <- list(
~ CZY_KIER + STAZ,
~ CZY_KIER + STAZ + CZY_KIER:STAZ,
~ CZY_KIER * PYT_2 * STAZ,
~ CZY_KIER * PYT_2 + STAZ,
~ CZY_KIER * PYT_2 + CZY_KIER * STAZ,
~ CZY_KIER + PYT_2 * STAZ + CZY_KIER:STAZ
)
# Dopasowanie modeli i zapis wyników
results <- data.frame(Model = model_names, Deviance = NA, DF = NA, p_value = NA)
for (i in seq_along(formulas)) {
fit <- loglm(formulas[[i]], data = tablica)
results$Deviance[i] <- round(fit$deviance, 2)
results$DF[i] <- fit$df
results$p_value[i] <- round(pchisq(fit$deviance, df = fit$df, lower.tail = FALSE), 4)
}
results
library(MASS)
# Utwórz tabelę kontyngencji
tablica <- xtabs(~ CZY_KIER + PYT_2 + STAZ, data = dane)
# Dopasuj model [1 2 3] (pełny)
fit_123 <- loglm(~ CZY_KIER * PYT_2 * STAZ, data = tablica)
# Wyciągnij częstości dopasowane przez model
fit_vals <- fitted(fit_123)
# Normalizuj do prawdopodobieństw
probs <- fit_vals / sum(fit_vals)
# Sprawdź poziomy zmiennych
levels_CZY_KIER <- dimnames(probs)$CZY_KIER
levels_PYT_2    <- dimnames(probs)$PYT_2
levels_STAZ     <- dimnames(probs)$STAZ
# Pytania z treści:
# 1. osoba na stanowisku kierowniczym i zdecydowanie zadowolona (PYT_2 == "2")
probs["Tak", "2", ]  # wszystkie STAŻe
# 2. osoba o stażu < 1 rok i nie pracuje na kierowniczym
probs["Nie", , "1"]  # wszystkie odpowiedzi PYT_2
# 3. osoba o stażu > 3 lata (np. STAŻ == "3") i nie pracuje na kierowniczym
probs["Nie", , "3"]
# Model [12 23]
fit_1223 <- loglm(~ CZY_KIER * PYT_2 + PYT_2 * STAZ, data = tablica)
# Prawdopodobieństwa
probs_1223 <- fitted(fit_1223) / sum(fitted(fit_1223))
# Te same kombinacje co wcześniej
probs_1223["Tak", "2", ]
probs_1223["Nie", , "1"]
probs_1223["Nie", , "3"]
library(MASS)
# Tabela 3D
tablica <- xtabs(~ CZY_KIER + PYT_2 + STAZ, data = dane)
# HIPOTEZA 1: CZY_KIER, PYT_2, STAZ są wzajemnie niezależne
# model z samymi efektami głównymi
fit_H1 <- loglm(~ CZY_KIER + PYT_2 + STAZ, data = tablica)
# HIPOTEZA 2: PYT_2 niezależna od pary (CZY_KIER, STAZ)
# tzn. model zawiera interakcję CZY_KIER:STAZ, ale nie z PYT_2
fit_H2 <- loglm(~ CZY_KIER * STAZ + PYT_2, data = tablica)
# HIPOTEZA 3: PYT_2 ⊥ CZY_KIER | STAZ — niezależność warunkowa
# tzn. dozwolona interakcja PYT_2:STAZ, ale nie CZY_KIER:PYT_2
fit_H3 <- loglm(~ PYT_2 * STAZ + CZY_KIER * STAZ, data = tablica)
# Zbieramy wyniki
hipotezy <- c("H1: całkowita niezależność",
"H2: PYT_2 niezależna od (CZY_KIER, STAZ)",
"H3: PYT_2 ⊥ CZY_KIER | STAZ")
results <- data.frame(
Hipoteza = hipotezy,
Deviance = c(fit_H1$deviance, fit_H2$deviance, fit_H3$deviance),
DF = c(fit_H1$df, fit_H2$df, fit_H3$df),
p_value = c(
round(pchisq(fit_H1$deviance, df = fit_H1$df, lower.tail = FALSE), 4),
round(pchisq(fit_H2$deviance, df = fit_H2$df, lower.tail = FALSE), 4),
round(pchisq(fit_H3$deviance, df = fit_H3$df, lower.tail = FALSE), 4)
)
)
results
# Tabela kontyngencji 3D
tablica <- xtabs(~ PYT_1 + PYT_2 + PŁEĆ, data = dane)
# Lista modeli od prostych do pełnych
models <- list(
model1 = ~ PYT_1 + PYT_2 + PŁEĆ,                          # pełna niezależność
model2 = ~ PYT_1 * PYT_2 + PŁEĆ,                          # interakcja PYT_1:PYT_2
model3 = ~ PYT_1 * PŁEĆ + PYT_2,                          # interakcja PYT_1:PŁEĆ
model4 = ~ PYT_2 * PŁEĆ + PYT_1,                          # interakcja PYT_2:PŁEĆ
model5 = ~ PYT_1 * PYT_2 + PYT_2 * PŁEĆ,                  # dwie interakcje
model6 = ~ PYT_1 * PŁEĆ + PYT_2 * PŁEĆ,                   # dwie inne interakcje
model7 = ~ PYT_1 * PYT_2 * PŁEĆ                           # pełny model trójkowy
)
# Dopasowanie modeli
results <- data.frame(Model = names(models), Deviance = NA, DF = NA, p_value = NA, AIC = NA, BIC = NA)
for (i in seq_along(models)) {
fit <- loglm(models[[i]], data = tablica)
results$Deviance[i] <- round(fit$deviance, 2)
results$DF[i] <- fit$df
results$p_value[i] <- round(pchisq(fit$deviance, df = fit$df, lower.tail = FALSE), 4)
results$AIC[i] <- round(AIC(fit), 2)
results$BIC[i] <- round(BIC(fit), 2)
}
# Zakładamy, że dane masz w ramce danych `dane`
# zmienne: CZY_KIER, PYT_2, STAZ
# Wczytanie danych
dane <- read.csv("ankieta.csv", sep = ";", fileEncoding = "Latin2")
colnames(dane) <- c('DZIAŁ','STAZ','CZY_KIER', 'PYT_1', 'PYT_2', 'PYT_3', 'PLEC', 'WIEK')
# Tabela kontyngencji 3D
tablica <- xtabs(~ CZY_KIER + PYT_2 + STAZ, data = dane)
# powinno zwrócić: "CZY_KIER" "PYT_2" "STAZ"
library(MASS)
# Lista nazw i formuł modeli log-liniowych
model_names <- c("[1 3]", "[13]", "[1 2 3]", "[12 3]", "[12 13]", "[1 23]")
formulas <- list(
~ CZY_KIER + STAZ,
~ CZY_KIER + STAZ + CZY_KIER:STAZ,
~ CZY_KIER * PYT_2 * STAZ,
~ CZY_KIER * PYT_2 + STAZ,
~ CZY_KIER * PYT_2 + CZY_KIER * STAZ,
~ CZY_KIER + PYT_2 * STAZ + CZY_KIER:STAZ
)
# Dopasowanie modeli i zapis wyników
results <- data.frame(Model = model_names, Deviance = NA, DF = NA, p_value = NA)
for (i in seq_along(formulas)) {
fit <- loglm(formulas[[i]], data = tablica)
results$Deviance[i] <- round(fit$deviance, 2)
results$DF[i] <- fit$df
results$p_value[i] <- round(pchisq(fit$deviance, df = fit$df, lower.tail = FALSE), 4)
}
results
library(MASS)
# Utwórz tabelę kontyngencji
tablica <- xtabs(~ CZY_KIER + PYT_2 + STAZ, data = dane)
# Dopasuj model [1 2 3] (pełny)
fit_123 <- loglm(~ CZY_KIER * PYT_2 * STAZ, data = tablica)
# Wyciągnij częstości dopasowane przez model
fit_vals <- fitted(fit_123)
# Normalizuj do prawdopodobieństw
probs <- fit_vals / sum(fit_vals)
# Sprawdź poziomy zmiennych
levels_CZY_KIER <- dimnames(probs)$CZY_KIER
levels_PYT_2    <- dimnames(probs)$PYT_2
levels_STAZ     <- dimnames(probs)$STAZ
# Pytania z treści:
# 1. osoba na stanowisku kierowniczym i zdecydowanie zadowolona (PYT_2 == "2")
probs["Tak", "2", ]  # wszystkie STAŻe
# 2. osoba o stażu < 1 rok i nie pracuje na kierowniczym
probs["Nie", , "1"]  # wszystkie odpowiedzi PYT_2
# 3. osoba o stażu > 3 lata (np. STAŻ == "3") i nie pracuje na kierowniczym
probs["Nie", , "3"]
# Model [12 23]
fit_1223 <- loglm(~ CZY_KIER * PYT_2 + PYT_2 * STAZ, data = tablica)
# Prawdopodobieństwa
probs_1223 <- fitted(fit_1223) / sum(fitted(fit_1223))
# Te same kombinacje co wcześniej
probs_1223["Tak", "2", ]
probs_1223["Nie", , "1"]
probs_1223["Nie", , "3"]
library(MASS)
# Tabela 3D
tablica <- xtabs(~ CZY_KIER + PYT_2 + STAZ, data = dane)
# HIPOTEZA 1: CZY_KIER, PYT_2, STAZ są wzajemnie niezależne
# model z samymi efektami głównymi
fit_H1 <- loglm(~ CZY_KIER + PYT_2 + STAZ, data = tablica)
# HIPOTEZA 2: PYT_2 niezależna od pary (CZY_KIER, STAZ)
# tzn. model zawiera interakcję CZY_KIER:STAZ, ale nie z PYT_2
fit_H2 <- loglm(~ CZY_KIER * STAZ + PYT_2, data = tablica)
# HIPOTEZA 3: PYT_2 ⊥ CZY_KIER | STAZ — niezależność warunkowa
# tzn. dozwolona interakcja PYT_2:STAZ, ale nie CZY_KIER:PYT_2
fit_H3 <- loglm(~ PYT_2 * STAZ + CZY_KIER * STAZ, data = tablica)
# Zbieramy wyniki
hipotezy <- c("H1: całkowita niezależność",
"H2: PYT_2 niezależna od (CZY_KIER, STAZ)",
"H3: PYT_2 ⊥ CZY_KIER | STAZ")
results <- data.frame(
Hipoteza = hipotezy,
Deviance = c(fit_H1$deviance, fit_H2$deviance, fit_H3$deviance),
DF = c(fit_H1$df, fit_H2$df, fit_H3$df),
p_value = c(
round(pchisq(fit_H1$deviance, df = fit_H1$df, lower.tail = FALSE), 4),
round(pchisq(fit_H2$deviance, df = fit_H2$df, lower.tail = FALSE), 4),
round(pchisq(fit_H3$deviance, df = fit_H3$df, lower.tail = FALSE), 4)
)
)
results
# Tabela kontyngencji 3D
tablica <- xtabs(~ PYT_1 + PYT_2 + PLEC, data = dane)
# Lista modeli od prostych do pełnych
models <- list(
model1 = ~ PYT_1 + PYT_2 + PŁEĆ,                          # pełna niezależność
model2 = ~ PYT_1 * PYT_2 + PŁEĆ,                          # interakcja PYT_1:PYT_2
model3 = ~ PYT_1 * PŁEĆ + PYT_2,                          # interakcja PYT_1:PŁEĆ
model4 = ~ PYT_2 * PŁEĆ + PYT_1,                          # interakcja PYT_2:PŁEĆ
model5 = ~ PYT_1 * PYT_2 + PYT_2 * PŁEĆ,                  # dwie interakcje
model6 = ~ PYT_1 * PŁEĆ + PYT_2 * PŁEĆ,                   # dwie inne interakcje
model7 = ~ PYT_1 * PYT_2 * PŁEĆ                           # pełny model trójkowy
)
# Dopasowanie modeli
results <- data.frame(Model = names(models), Deviance = NA, DF = NA, p_value = NA, AIC = NA, BIC = NA)
for (i in seq_along(models)) {
fit <- loglm(models[[i]], data = tablica)
results$Deviance[i] <- round(fit$deviance, 2)
results$DF[i] <- fit$df
results$p_value[i] <- round(pchisq(fit$deviance, df = fit$df, lower.tail = FALSE), 4)
results$AIC[i] <- round(AIC(fit), 2)
results$BIC[i] <- round(BIC(fit), 2)
}
# Tabela kontyngencji 3D
tablica <- xtabs(~ PYT_1 + PYT_2 + PLEC, data = dane)
#tablica <- xtabs(~ PYT_1 + PYT_2 + PŁEĆ, data = dane)
names(dimnames(tablica))
# Lista modeli od prostych do pełnych
# Tabela kontyngencji 3D
tablica <- xtabs(~ PYT_1 + PYT_2 + PLEC, data = dane)
# Modele
models <- list(
M1 = ~ PYT_1 + PYT_2 + PLEC,
M2 = ~ PYT_1 * PYT_2 + PLEC,
M3 = ~ PYT_1 * PLEC + PYT_2,
M4 = ~ PYT_2 * PLEC + PYT_1,
M5 = ~ PYT_1 * PYT_2 + PYT_2 * PLEC,
M6 = ~ PYT_1 * PLEC + PYT_2 * PLEC,
M7 = ~ PYT_1 * PYT_2 * PLEC
)
# Dopasowanie i porównanie
results <- data.frame(Model = names(models), Deviance = NA, DF = NA, p_value = NA, AIC = NA, BIC = NA)
for (i in seq_along(models)) {
fit <- loglm(models[[i]], data = tablica)
results$Deviance[i] <- round(fit$deviance, 2)
results$DF[i] <- fit$df
results$p_value[i] <- round(pchisq(fit$deviance, df = fit$df, lower.tail = FALSE), 4)
results$AIC[i] <- round(AIC(fit), 2)
results$BIC[i] <- round(BIC(fit), 2)
}
library(MASS)
# Tabela 3D
tablica <- xtabs(~ PYT_1 + PYT_2 + PLEC, data = dane)
N <- sum(tablica)
max_df <- loglm(~ PYT_1 * PYT_2 * PLEC, data = tablica)$df  # pełny model
# Modele
models <- list(
M1 = ~ PYT_1 + PYT_2 + PLEC,
M2 = ~ PYT_1 * PYT_2 + PLEC,
M3 = ~ PYT_1 * PLEC + PYT_2,
M4 = ~ PYT_2 * PLEC + PYT_1,
M5 = ~ PYT_1 * PYT_2 + PYT_2 * PLEC,
M6 = ~ PYT_1 * PLEC + PYT_2 * PLEC,
M7 = ~ PYT_1 * PYT_2 * PLEC
)
# Zbieranie wyników
results <- data.frame(Model = names(models), Deviance = NA, DF = NA, p_value = NA, AIC = NA, BIC = NA)
for (i in seq_along(models)) {
fit <- loglm(models[[i]], data = tablica)
dev <- fit$deviance
df <- fit$df
params <- max_df - df  # liczba parametrów modelu
results$Deviance[i] <- round(dev, 2)
results$DF[i] <- df
results$p_value[i] <- round(pchisq(dev, df = df, lower.tail = FALSE), 4)
results$AIC[i] <- round(dev + 2 * params, 2)
results$BIC[i] <- round(dev + log(N) * params, 2)
}
results
