alpha <- 0.05  # Poziom istotności
listan_p <- list()
listan_dlug <- list()
# Główna pętla
for (n in n_values) {
lista_pwilson <- numeric(length(p_values))
lista_pnormal <- numeric(length(p_values))
lista_pbeta <- numeric(length(p_values))
lista_dlug_wilson <- numeric(length(p_values))
lista_dlug_normal <- numeric(length(p_values))
lista_dlug_beta <- numeric(length(p_values))
for (idx in seq_along(p_values)) {
p <- p_values[idx]
perc_wilson <- 0
perc_normal <- 0
perc_beta <- 0
dlug_wilson <- 0
dlug_normal <- 0
dlug_beta <- 0
for (i in 1:N) {
X <- rbinom(1, n, p)
# Obliczanie przedziałów ufności
ci_wilson <- binom.confint(X, n, conf.level = 1 - alpha, methods = "wilson")
ci_normal <- binom.confint(X, n, conf.level = 1 - alpha, methods = "asymptotic")
ci_beta <- binom.confint(X, n, conf.level = 1 - alpha, methods = "exact")
# Sprawdzanie pokrycia przedziału
if (ci_wilson$lower <= p && ci_wilson$upper >= p) {
dlug_wilson <- dlug_wilson + (ci_wilson$upper - ci_wilson$lower)
perc_wilson <- perc_wilson + 1
}
if (ci_normal$lower <= p && ci_normal$upper >= p) {
dlug_normal <- dlug_normal + (ci_normal$upper - ci_normal$lower)
perc_normal <- perc_normal + 1
}
if (ci_beta$lower <= p && ci_beta$upper >= p) {
dlug_beta <- dlug_beta + (ci_beta$upper - ci_beta$lower)
perc_beta <- perc_beta + 1
}
}
lista_pwilson[idx] <- perc_wilson / N
lista_pnormal[idx] <- perc_normal / N
lista_pbeta[idx] <- perc_beta / N
lista_dlug_wilson[idx] <- dlug_wilson / N
lista_dlug_normal[idx] <- dlug_normal / N
lista_dlug_beta[idx] <- dlug_beta / N
}
listan_p[[as.character(n)]] <- data.frame(p_values, lista_pwilson, lista_pnormal, lista_pbeta)
listan_dlug[[as.character(n)]] <- data.frame(p_values, lista_dlug_wilson, lista_dlug_normal, lista_dlug_beta)
}
# Tworzenie wykresów
par(mfrow = c(3, 2), mar = c(5, 5, 2, 2))
methods <- c("Wilson", "Normal", "Beta")
colors <- c("blue", "red", "green")
for (i in seq_along(n_values)) {
n <- n_values[i]
# Prawdopodobieństwo pokrycia
plot(listan_p[[as.character(n)]]$p_values, listan_p[[as.character(n)]]$lista_pwilson, type = "l", col = "blue",
xlab = "p", ylab = "Prawdopodobieństwo pokrycia",
main = paste("Prawdopodobieństwo pokrycia dla n=", n),
ylim = c(min(listan_p[[as.character(n)]]$lista_pwilson), 1),  # Poprawny sposób ustawienia zakresu osi Y
cex.lab = 0.8,          # Zmniejszenie rozmiaru czcionki etykiet osi
cex.axis = 0.8)         # Zmniejszenie rozmiaru czcionki dla wartości na osiach
# Dodanie pozostałych linii
lines(listan_p[[as.character(n)]]$p_values, listan_p[[as.character(n)]]$lista_pnormal, col = "red")
lines(listan_p[[as.character(n)]]$p_values, listan_p[[as.character(n)]]$lista_pbeta, col = "green")
# Dodanie legendy
legend("bottomright", legend = methods, col = colors, lty = 1,
cex = 0.8,          # Zmniejszenie rozmiaru czcionki legendy
box.lwd = 0.5,      # Grubość obramowania legendy
inset = 0.02)
# Dodanie poziomej przerywanej linii
abline(h = 0.95, col = "black", lty = 2)
# Długość przedziału
plot(listan_dlug[[as.character(n)]]$p_values, listan_dlug[[as.character(n)]]$lista_dlug_wilson, type = "l", col = "blue",
xlab = "p", ylab = "Średnia długość przedziału",
main = paste("Długość przedziału dla n=", n),cex.lab = 0.8)
lines(listan_dlug[[as.character(n)]]$p_values, listan_dlug[[as.character(n)]]$lista_dlug_normal, col = "red")
lines(listan_dlug[[as.character(n)]]$p_values, listan_dlug[[as.character(n)]]$lista_dlug_beta, col = "green")
legend("bottomright",legend = methods, col = colors, lty = 1,
cex = 0.8,          # Zmniejszenie rozmiaru czcionki
box.lwd = 0.5,      # Grubość obramowania legendy
inset = 0.02)
abline(h = 0.95, col = "black", lty = 2)
}
par(mfrow = c(1, 1))
x1 <- 3
n1 <- 10
p1 <- 0.5
test1_binom <- binom.test(x1, n1, p1)
test1_prop <- prop.test(x1, n1, p1)
test1_binom
test1_prop
x2 <- 260
n2 <- 500
p2 <- 0.5
test2_binom <- binom.test(x2, n2, p2)
test2_prop <- prop.test(x2, n2, p2)
test2_binom
test2_prop
alpha <- 0.05
k <- sum(PŁEĆ == "K")
n <- length(PŁEĆ)
p_0 <- 0.5
binom_result <- binom.test(k, n, p = p_0, conf.level = 1 - alpha)
prop_result <- prop.test(k, n, p = p_0, conf.level = 1 - alpha)
results <- data.frame(
Test = c("binom.test", "prop.test"),
P_value = c(binom_result$p.value, prop_result$p.value),
Interpretation = ifelse(c(binom_result$p.value, prop_result$p.value) < alpha,
"Odrzucamy H0 - różnica istotna statystycznie",
"Brak podstaw do odrzucenia H0")
)
results
alpha <- 0.05
zad <- sum(CZY_ZADOW == "TAK")
n_zad <- length(CZY_ZADOW)
p_0 <- 0.7
binom_result <- binom.test(zad, n_zad, p = p_0, conf.level = 1 - alpha)
prop_result <- prop.test(zad, n_zad, p = p_0, conf.level = 1 - alpha)
results <- data.frame(
Test = c("binom.test", "prop.test"),
P_value = c(binom_result$p.value, prop_result$p.value),
Interpretation = ifelse(c(binom_result$p.value, prop_result$p.value) < alpha,
"Odrzucamy H0 - różnica istotna statystycznie",
"Brak podstaw do odrzucenia H0")
)
results
alpha <- 0.05
k <- sum(PŁEĆ == "K" & CZY_KIER == "Tak")
n_k <- sum(PŁEĆ == "K")
m <- sum(PŁEĆ == "M" & CZY_KIER == "Tak")
n_m <- sum(PŁEĆ == "M")
p_0 <- m/n_m
prop_result <- prop.test(k, n_k, p_0, conf.level = 1 - alpha)
prop_result
alpha <- 0.05
k <- sum(PŁEĆ == "K" & CZY_ZADOW == "TAK")
n_k <- sum(PŁEĆ == "K")
m <- sum(PŁEĆ == "M" & CZY_ZADOW == "TAK")
n_m <- sum(PŁEĆ == "M")
p_0 <- m/n_m
prop_result <- prop.test(k, n_k, p_0, conf.level = 1 - alpha)
prop_result
alpha <- 0.05
k <- sum(PŁEĆ == "K" & DZIAŁ == "HR")
n_k <- sum(PŁEĆ == "K")
m <- sum(PŁEĆ == "M" & DZIAŁ == "HR")
n_m <- sum(PŁEĆ == "M")
p_0 <- m/n_m
prop_result <- prop.test(k, n_k, p_0, conf.level = 1 - alpha)
prop_result
powertest <- function(N, n, alpha, p0){
p_values <- seq(0.01, 0.99, by = 0.01)
l <- length(p_values)
binom_vec <- numeric(l)
prop_vec <- numeric(l)
for (j in 1:l){
p <- p_values[j]
binom_vec_N <- numeric(N)
prop_vec_N <- numeric(N)
for (i in 1:N) {
binom <- rbinom(1, n, p)
binom_vec[i] <- binom.test(binom, n, p0, conf.level = 1 - alpha)
prop_vec[i] <- prop.test(binom, n, p0, conf.level = 1 - alpha)
}
binomal_vec[j] <- sum(binom_vec_N)/N
prop_vec[j] <- sum(prop_vec_N)/N
}
return(list(power_bin = binomal_vec, power_prop = prop_vec))
}
powertest <- function(N, n, alpha, p0){
p_values <- seq(0.01, 0.99, by = 0.01)
l <- length(p_values)
binom_vec <- numeric(l)
prop_vec <- numeric(l)
for (j in 1:l){
p <- p_values[j]
binom_vec_N <- numeric(N)
prop_vec_N <- numeric(N)
for (i in 1:N) {
binom <- rbinom(1, n, p)
binom_test <- binom.test(binom, n, p0, conf.level = 1 - alpha)
binom_vec_N[i] <- binom_test$p.value <= alpha
prop_test <- prop.test(binom, n, p0, conf.level = 1 - alpha)
prop_vec_N[i] <- prop_test$p.value <= alpha
}
binom_vec[j] <- mean(binom_vec_N)
prop_vec[j] <- mean(prop_vec_N)
}
return(list(power_bin = binom_vec, power_prop = prop_vec))
}
N <- 500
n <- 100
alpha <- 0.05
p0 <- 0.9
result <- powertest(N, n, alpha, p0)
library(ggplot2)
N <- 500
n <- 100
alpha <- 0.05
p0 <- 0.9
result <- powertest(N, n, alpha, p0)
# Tworzenie ramki danych do wykresu
data <- data.frame(
p = seq(0.01, 0.99, by = 0.01),
Power_Binom = result$power_bin,
Power_Prop = result$power_prop
)
# Tworzenie wykresu
ggplot(data, aes(x = p)) +
geom_line(aes(y = Power_Binom, color = "Test binominalny"), size = 1.2) +
geom_line(aes(y = Power_Prop, color = "Test proporcji"), size = 1.2) +
labs(
title = "Porównanie mocy testów",
x = "Prawdopodobieństwo sukcesu (p)",
y = "Moc testu",
color = "Rodzaj testu"
) +
theme_minimal() +
scale_color_manual(values = c("Test binominalny" = "blue", "Test proporcji" = "red"))
# Tworzenie ramki danych do wykresu
data <- data.frame(
p = seq(0.01, 0.99, by = 0.01),
Power_Binom = result$power_bin,
Power_Prop = result$power_prop
)
# Tworzenie wykresu
ggplot(data, aes(x = p)) +
geom_line(aes(y = Power_Binom, color = "Test binominalny"), size = 1.2) +
geom_line(aes(y = Power_Prop, color = "Test proporcji"), size = 1.2) +
geom_vline(xintercept = 0.9, linetype = "dashed", color = "black") +
labs(
title = "Porównanie mocy testów",
x = "Prawdopodobieństwo sukcesu (p)",
y = "Moc testu",
color = "Rodzaj testu"
) +
theme_minimal() +
scale_color_manual(values = c("Test binominalny" = "blue", "Test proporcji" = "red"))
# Tworzenie ramki danych do wykresu
data <- data.frame(
p = seq(0.01, 0.99, by = 0.01),
Power_Binom = result$power_bin,
Power_Prop = result$power_prop
)
# Tworzenie wykresu
ggplot(data, aes(x = p)) +
geom_line(aes(y = Power_Binom, color = "Test binominalny"), size = 1.2) +
geom_line(aes(y = Power_Prop, color = "Test proporcji"), size = 1.2) +
geom_vline(xintercept = 0.9, linetype = "dashed", color = "black") +
labs(
title = "Porównanie mocy testów",
x = "Prawdopodobieństwo sukcesu (p)",
y = "Moc testu",
color = "Rodzaj testu"
) +
theme_minimal() +
scale_color_manual(values = c("Test binominalny" = "blue", "Test proporcji" = "red", "H0: p = 0.9" = "black"))
# Tworzenie ramki danych do wykresu
data <- data.frame(
p = seq(0.01, 0.99, by = 0.01),
Power_Binom = result$power_bin,
Power_Prop = result$power_prop
)
# Tworzenie wykresu
ggplot(data, aes(x = p)) +
geom_line(aes(y = Power_Binom, color = "Test binominalny"), size = 1.2) +
geom_line(aes(y = Power_Prop, color = "Test proporcji"), size = 1.2) +
geom_vline(aes(xintercept = 0.9, color = "H0: p = 0.9"), linetype = "dashed", size = 1) +
labs(
title = "Porównanie mocy testów",
x = "Prawdopodobieństwo sukcesu (p)",
y = "Moc testu",
color = "Rodzaj testu"
) +
theme_minimal() +
scale_color_manual(values = c("Test binominalny" = "blue", "Test proporcji" = "red", "H0: p = 0.9" = "black"))
# Tworzenie ramki danych do wykresu
data <- data.frame(
p = seq(0.01, 0.99, by = 0.01),
Power_Binom = result$power_bin,
Power_Prop = result$power_prop
)
# Tworzenie wykresu
ggplot(data, aes(x = p)) +
geom_line(aes(y = Power_Binom, color = "Test binominalny"), size = 1.2) +
geom_line(aes(y = Power_Prop, color = "Test proporcji"), size = 1.2) +
geom_vline(aes(xintercept = 0.9, color = "H0: p = 0.9"), linetype = "dashed", size = 1) +
labs(
title = "Porównanie mocy testów",
x = "Prawdopodobieństwo sukcesu (p)",
y = "Moc testu",
color = "Rodzaj testu"
) +
theme_minimal() +
scale_color_manual(values = c("Test binominalny" = "blue", "Test proporcji" = "red", "H0: p = 0.9" = "black"))
N <- 500
n_values <- c(30, 100, 1000)
alpha <- 0.05
p0 <- 0.9
result <- powertest(N, n_values, alpha, p0)
N <- 500
n_values <- c(30, 100, 1000)
alpha <- 0.05
p0 <- 0.9
result <- numeric(3)
for ( i in 1:3){
n <- n_values[i]
result[i] <- powertest(N, n, alpha, p0)
}
N <- 500
n_values <- c(30, 100, 150)
alpha <- 0.05
p0 <- 0.9
result <- numeric(3)
for ( i in 1:3){
n <- n_values[i]
result[i] <- powertest(N, n, alpha, p0)
}
# Ładowanie pakietu do wykresów
library(ggplot2)
# Przygotowanie danych do wykresu
data_list <- lapply(1:3, function(i) {
data.frame(
p = seq(0.01, 0.99, by = 0.01),
Power_Binom = result[[i]]$power_bin,
Power_Prop = result[[i]]$power_prop,
n = n_values[i]
)
})
# Parametry
N <- 500
n <- 100
alpha <- 0.05
p0 <- 0.9
# Wynik testu
result <- powertest(N, n, alpha, p0)
# Tworzenie ramki danych do wykresu
data <- data.frame(
p = seq(0.01, 0.99, by = 0.01),
Power_Binom = result$power_bin,
Power_Prop = result$power_prop
)
# Tworzenie wykresu
ggplot(data, aes(x = p)) +
geom_line(aes(y = Power_Binom, color = "Test binominalny"), size = 1.2) +
geom_line(aes(y = Power_Prop, color = "Test proporcji"), size = 1.2) +
geom_vline(aes(xintercept = 0.9, color = "H0: p = 0.9"), linetype = "dashed", size = 1) +  # Dodanie linii na p = 0.9 z opisem w legendzie
labs(
title = "Porównanie mocy testów",
x = "Prawdopodobieństwo sukcesu (p)",
y = "Moc testu",
color = "Rodzaj testu"
) +
theme_minimal() +
scale_color_manual(values = c("Test binominalny" = "blue", "Test proporcji" = "red", "H0: p = 0.9" = "black"))
N <- 500
n_values <- c(30, 100, 1)
alpha <- 0.05
p0 <- 0.9
result <- numeric(3)
for ( i in 1:3){
n <- n_values[i]
result[i] <- powertest(N, n, alpha, p0)
}
N <- 500
n_values <- c(30, 100, 1)
alpha <- 0.05
p0 <- 0.9
results <- numeric(3)
for ( i in 1:3){
n <- n_values[i]
results[i] <- powertest(N, n, alpha, p0)
}
N <- 500
n_values <- c(30, 100, 150)
alpha <- 0.05
p0 <- 0.9
results <- numeric(3)
for ( i in 1:3){
n <- n_values[i]
results[i] <- powertest(N, n, alpha, p0)
}
library(ggplot2)
for (result in results){
# Tworzenie ramki danych do wykresu
data <- data.frame(
p = seq(0.01, 0.99, by = 0.01),
Power_Binom = result$power_bin,
Power_Prop = result$power_prop
)
# Tworzenie wykresu
ggplot(data, aes(x = p)) +
geom_line(aes(y = Power_Binom, color = "Test binominalny"), size = 1.2) +
geom_line(aes(y = Power_Prop, color = "Test proporcji"), size = 1.2) +
geom_vline(aes(xintercept = 0.9, color = "H0: p = 0.9"), linetype = "dashed", size = 1) +  # Dodanie linii na p = 0.9 z opisem w legendzie
labs(
title = "Porównanie mocy testów",
x = "Prawdopodobieństwo sukcesu (p)",
y = "Moc testu",
color = "Rodzaj testu"
) +
theme_minimal() +
scale_color_manual(values = c("Test binominalny" = "blue", "Test proporcji" = "red", "H0: p = 0.9" = "black"))}
library(ggplot2)
# Iterowanie przez wyniki i tworzenie wykresów
for (i in 1:3) {
result <- results[[i]]  # Pobieramy wynik z listy
# Tworzenie ramki danych do wykresu
data <- data.frame(
p = seq(0.01, 0.99, by = 0.01),
Power_Binom = result$power_bin,
Power_Prop = result$power_prop
)
# Tworzenie wykresu
ggplot(data, aes(x = p)) +
geom_line(aes(y = Power_Binom, color = "Test binominalny"), size = 1.2) +
geom_line(aes(y = Power_Prop, color = "Test proporcji"), size = 1.2) +
geom_vline(aes(xintercept = 0.9, color = "H0: p = 0.9"), linetype = "dashed", size = 1) +  # Dodanie linii na p = 0.9 z opisem w legendzie
labs(
title = paste("Porównanie mocy testów dla n =", n_values[i]),  # Tytuł wykresu uwzględniający wartość n
x = "Prawdopodobieństwo sukcesu (p)",
y = "Moc testu",
color = "Rodzaj testu"
) +
theme_minimal() +
scale_color_manual(values = c("Test binominalny" = "blue", "Test proporcji" = "red", "H0: p = 0.9" = "black"))
}
"""powertest <- function(N, n, alpha, p0){
p_values <- seq(0.01, 0.99, by = 0.01)
l <- length(p_values)
binom_vec <- numeric(l)
prop_vec <- numeric(l)
for (j in 1:l){
p <- p_values[j]
binom_vec_N <- numeric(N)
prop_vec_N <- numeric(N)
for (i in 1:N) {
binom <- rbinom(1, n, p)
binom_test <- binom.test(binom, n, p0, conf.level = 1 - alpha)
binom_vec_N[i] <- binom_test$p.value <= alpha
prop_test <- prop.test(binom, n, p0, conf.level = 1 - alpha)
prop_vec_N[i] <- prop_test$p.value <= alpha
}
binom_vec[j] <- mean(binom_vec_N)
prop_vec[j] <- mean(prop_vec_N)
}
return(list(power_bin = binom_vec, power_prop = prop_vec))
}"""
"""powertest <- function(N, n, alpha, p0){
p_values <- seq(0.01, 0.99, by = 0.01)
l <- length(p_values)
binom_vec <- numeric(l)
prop_vec <- numeric(l)
for (j in 1:l){
p <- p_values[j]
binom_vec_N <- numeric(N)
prop_vec_N <- numeric(N)
for (i in 1:N) {
binom <- rbinom(1, n, p)
binom_test <- binom.test(binom, n, p0, conf.level = 1 - alpha)
binom_vec_N[i] <- binom_test$p.value <= alpha
prop_test <- prop.test(binom, n, p0, conf.level = 1 - alpha)
prop_vec_N[i] <- prop_test$p.value <= alpha
}
binom_vec[j] <- mean(binom_vec_N)
prop_vec[j] <- mean(prop_vec_N)
}
return(list(power_bin = binom_vec, power_prop = prop_vec))
}"""
powertest <- function(N, n, alpha, p0) {
p_values <- seq(0.01, 0.99, by = 0.01)
l <- length(p_values)
binom_vec <- numeric(l)
prop_vec <- numeric(l)
for (j in 1:l) {
p <- p_values[j]
binom_vec_N <- numeric(N)
prop_vec_N <- numeric(N)
for (i in 1:N) {
binom <- rbinom(1, n, p)
binom_test <- binom.test(binom, n, p0, conf.level = 1 - alpha)
binom_vec_N[i] <- binom_test$p.value <= alpha
prop_test <- prop.test(binom, n, p0, conf.level = 1 - alpha)
prop_vec_N[i] <- prop_test$p.value <= alpha
}
binom_vec[j] <- mean(binom_vec_N)
prop_vec[j] <- mean(prop_vec_N)
}
# Funkcja powertest
powertest <- function(N, n, alpha, p0) {
p_values <- seq(0.01, 0.99, by = 0.01)
l <- length(p_values)
binom_vec <- numeric(l)
prop_vec <- numeric(l)
for (j in 1:l) {
p <- p_values[j]
binom_vec_N <- numeric(N)
prop_vec_N <- numeric(N)
for (i in 1:N) {
binom <- rbinom(1, n, p)
binom_test <- binom.test(binom, n, p0, conf.level = 1 - alpha)
binom_vec_N[i] <- binom_test$p.value <= alpha
prop_test <- prop.test(binom, n, p0, conf.level = 1 - alpha)
prop_vec_N[i] <- prop_test$p.value <= alpha
}
binom_vec[j] <- mean(binom_vec_N)
prop_vec[j] <- mean(prop_vec_N)
}
# Zwrócenie wyników w postaci listy
return(list(power_bin = binom_vec, power_prop = prop_vec))
}
