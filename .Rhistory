rownames(t1) = c("Ilość")
f1 = xtable(t1, caption = "Tablica ilości dla zmiennej CZY KIER", caption.placement="top")
print(f1, type = "latex", table.placement = "H", caption.placement = "top", comment = FALSE)
tab_PLEC <- table(df$PŁEĆ)
t1 = matrix(tab_PLEC, ncol=2, nrow=1, byrow = FALSE)
colnames(t1) = c("Kobieta", "Mężczyzna")
rownames(t1) = c("Ilość")
f1 = xtable(t1, caption = "Tablica ilości dla zmiennej PŁEĆ", caption.placement="top")
print(f1, type = "latex", table.placement = "H", caption.placement = "top", comment = FALSE)
tab_WIEK_KAT <- table(df$WIEK_KAT)
t1 = matrix(tab_WIEK_KAT, ncol=4, nrow=1, byrow = FALSE)
colnames(t1) = c('0-35', '36-45', '46-55', '55+')
rownames(t1) = c("Ilość")
f1 = xtable(t1, caption = "Tablica ilości dla zmiennej WIEK KAT", caption.placement="top")
print(f1, type = "latex", table.placement = "H", caption.placement = "top", comment = FALSE)
etykiety <- c('zdacydowanie się nie zgadzam', 'nie zgadzam się', 'nie mam zdania', 'zgadzam się', 'zdacydowanie się zgadzam')
pie(table(df$PYT_1), labels = etykiety,, cex = 0.8, main = "Odpowiedź na pierwsze pytanie")
par(mar = c(8, 4, 4, 2))
barplot(table(df$PYT_1), names.arg = etykiety, las = 2, cex.names = 0.8, main = "Odpowiedź na pierwsze pytanie")
etykiety <- c('zdacydowanie się nie zgadzam', 'nie zgadzam się', 'zgadzam się', 'zdacydowanie się zgadzam')
pie(table(df$PYT_2), labels = etykiety, cex = 0.8, main = "Odpowiedź na drugie pytanie")
par(mar = c(8, 4, 4, 2))
barplot(table(df$PYT_2), names.arg = etykiety, las = 2, cex.names = 0.8, main = "Odpowiedź na drugie pytanie")
t3 <- table(df$PYT_1, df$DZIAŁ)
rownames(t3) <- c('zdacydowanie się nie zgadzam', 'nie zgadzam się', 'nie mam zdania', 'zgadzam się', 'zdacydowanie się zgadzam')
colnames(t3) <- c("HR", "IT", "MK", "PD")
f3 = xtable(t3,label="l3",caption="Tabela wielodzielcza dla zmiennych PYT 1 i DZIAL",caption.placement = "top")
print(f3,type = "latex",caption.placement = "top", comment=FALSE)
t3 <- table(df$PYT_1, df$STAŻ)
rownames(t3) <- c('zdacydowanie się nie zgadzam', 'nie zgadzam się', 'nie mam zdania', 'zgadzam się', 'zdacydowanie się zgadzam')
colnames(t3) <- c('<1 rok', '1-2 lata', '3+ lat')
f3 = xtable(t3,label="l3",caption="Tabela wielodzielcza dla zmiennych PYT 1 i STAŻ",caption.placement = "top")
print(f3,type = "latex",caption.placement = "top", comment=FALSE)
t3 <- table(df$PYT_1, df$CZY_KIER)
rownames(t3) <- c('zdacydowanie się nie zgadzam', 'nie zgadzam się', 'nie mam zdania', 'zgadzam się', 'zdacydowanie się zgadzam')
colnames(t3) <- c("TAK", "NIE")
f3 = xtable(t3,label="l3",caption="Tabela wielodzielcza dla zmiennych PYT 1 i $CZY_KIER$",caption.placement = "top")
print(f3,type = "latex",caption.placement = "top", comment=FALSE)
t3 <- table(df$PYT_1, df$PŁEĆ)
rownames(t3) <- c('zdacydowanie się nie zgadzam', 'nie zgadzam się', 'nie mam zdania', 'zgadzam się', 'zdacydowanie się zgadzam')
colnames(t3) <- c("Kobieta", "Mężczyzna")
f3 = xtable(t3,label="l3",caption="Tabela wielodzielcza dla zmiennych PYT 1 i PŁEĆ",caption.placement = "top")
print(f3,type = "latex",caption.placement = "top", comment=FALSE)
t3 <- table(df$PYT_1, df$WIEK_KAT)
rownames(t3) <- c('zdacydowanie się nie zgadzam', 'nie zgadzam się', 'nie mam zdania', 'zgadzam się', 'zdacydowanie się zgadzam')
colnames(t3) <- c('0-35', '36-45', '46-55', '55+')
f3 = xtable(t3,label="l3",caption="Tabela wielodzielcza dla zmiennych PYT 1 i WIEK KAT",caption.placement = "top")
print(f3,type = "latex",caption.placement = "top", comment=FALSE)
t4 <- table(df$PYT_1, df$PYT_2)
rownames(t4) <- c('zdacydowanie się nie zgadzam', 'nie zgadzam się', 'nie mam zdania', 'zgadzam się', 'zdacydowanie się zgadzam')
colnames(t4) <- c('zdacydowanie się nie zgadzam', 'nie zgadzam się', 'zgadzam się', 'zdacydowanie się zgadzam')
f4 = xtable(t4,label="l4",caption="Tabela wielodzielcza dla zmiennych PYT 1 i PYT 2",caption.placement = "top")
print(f4,type = "latex",caption.placement = "top", comment=FALSE)
df$CZY_ZADOW <- cut(df$PYT_2,
breaks = c(-3, 0, 2),
labels = c('NIE', 'TAK'))
#dane <- dane %>%
#  mutate(CZY_ZADOW = case_when(
#    PYT_2 %in% c(-2, -1) ~ "Niezadowoleni",
#    PYT_2 %in% c(1, 2) ~ "Zadowoleni",
#    TRUE ~ NA_character_))
attach(df)
Colors = c("navy", "lightblue", "pink", 'red')
print(mosaicplot(table(CZY_ZADOW, DZIAŁ), color=Colors, xlab = 'Czy zadowolony', ylab = 'Dzial', main = "CZY ZADOWOLONY ~ DZIAL"))
print(mosaicplot(table(CZY_ZADOW, STAŻ), color=Colors, xlab = 'Czy zadowolony', ylab = 'Staz', main = "CZY ZADOWOLONY ~ STAZ"))
print(mosaicplot(table(CZY_ZADOW, CZY_KIER), color=Colors, xlab = 'Czy zadowolony', ylab = 'Czy kierownik', main = "CZY ZADOWOLONY ~ CZY KIER"))
print(mosaicplot(table(CZY_ZADOW, PŁEĆ), color=Colors, xlab = 'Czy zadowolony', ylab = 'Plec', main = "CZY ZADOWOLONY ~ PLEC"))
print(mosaicplot(table(CZY_ZADOW, WIEK_KAT), color=Colors, xlab = 'Czy zadowolony', ylab = 'Wiek kat', main = "CZY ZADOWOLONY ~ WIKE KAT"))
PYT_1 <- as.factor(PYT_1)
tabela_PYT_1 <- prop.table(table(PYT_1))
bp_PYT_1 <- barplot(tabela_PYT_1, col = "lightblue", main = "Proporcje PYT_1", xlab = "Odpowiedź", ylab = "Proporcja", ylim = c(0, 0.6))
text(x = bp_PYT_1, y = tabela_PYT_1, labels = round(tabela_PYT_1, 2), pos = 3, cex = 1)
tabela_grupy <- prop.table(table(PYT_1, CZY_KIER), margin = 2)
bp_grupy <- barplot(tabela_grupy, beside = TRUE, col = c("lightblue", "steelblue", "skyblue", "cornflowerblue", "navy"), legend = rownames(tabela_grupy), main = "PYT_1 wg CZY_KIER",xlab = "Odpowiedź", ylab = "Proporcja", ylim = c(0, 0.6))
text(x = bp_grupy, y = tabela_grupy, labels = round(tabela_grupy, 2), pos = 3, cex = 1)
# Losowanie 5 liczb z zakresu 1-10
sample(1:10, size = 5)
# Losowanie 5 liczb z powtórzeniami
sample(1:10, size = 5, replace = TRUE)
# Losowanie z różnymi prawdopodobieństwami
sample(1:10, size = 5, prob = c(0.1, 0.05, 0.15, 0.1, 0.2, 0.05, 0.05, 0.1, 0.1, 0.1))
sample_rows_with_replacement <- sample(1:nrow(df), size = round(0.1 * nrow(df)), replace = TRUE)
df[sample_rows_with_replacement, ]
sample_rows_without_replacement <- sample(1:nrow(df), size = round(0.1 * nrow(df)), replace = FALSE)
df[sample_rows_without_replacement, ]
# Funkcja do generowania pojedynczej realizacji rozkładu dwumianowego
binominal_sim <- function(n, p) {
result <- sum(runif(n) < p)
return(result)
}
# Funkcja do generowania N realizacji rozkładu dwumianowego
binominal_N_sim <- function(n, p, N) {
W <- numeric(N)
for (i in 1:N) {
W[i] <- binominal_prob(n, p)
}
return(W)
}
# Parametry rozkładu dwumianowego
n <- 100
p <- 0.5
N <- 10000
# Generowanie danych
simulated_data <- binominal_N_sim(n, p, N)
# Funkcja do generowania pojedynczej realizacji rozkładu dwumianowego
binominal_sim <- function(n, p) {
result <- sum(runif(n) < p)
return(result)
}
# Funkcja do generowania N realizacji rozkładu dwumianowego
binominal_N_sim <- function(n, p, N) {
W <- numeric(N)
for (i in 1:N) {
W[i] <- binominal_sim(n, p)
}
return(W)
}
# Parametry rozkładu dwumianowego
n <- 100
p <- 0.5
N <- 10000
# Generowanie danych
simulated_data <- binominal_N_sim(n, p, N)
# Teoretyczne wartości
theoretical_mean <- n * p
theoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- mean(simulated_data)
empirical_sd <- sd(simulated_data)
cat("Teoretyczna średnia: ", theoretical_mean, "\n")
cat("Teoretyczne odchylenie standardowe: ", theoretical_sd, "\n")
cat("Empiryczna średnia: ", empirical_mean, "\n")
cat("Empiryczne odchylenie standardowe: ", empirical_sd, "\n")
# Teoretyczne prawdopodobieństwa rozkładu dwumianowego
x_vals <- 0:n
theoretical_probs <- dbinom(x_vals, size = n, prob = p) * N
# Histogram wyników symulacji
hist(simulated_data,
breaks = seq(-0.5, n + 0.5, by = 1),
main = "Porównanie symulacji z rozkładem teoretycznym",
xlab = "Liczba sukcesów",
col = "lightblue",
border = "black",
freq = TRUE,
right = FALSE)
# Dodanie teoretycznych wartości
lines(x_vals, theoretical_probs, col = "red", lwd = 2)  # Linia
legend("topright", legend = c("Symulacja", "Teoria"),
fill = c("lightblue", NA), col = c("black", "red"),
lty = c(NA, 1), border = "black")
# Funkcja do generowania pojedynczej realizacji rozkładu dwumianowego
binomial_sim <- function(n, p) {
result <- sum(runif(n) < p)
return(result)
}
# Funkcja do generowania N realizacji rozkładu dwumianowego
binomial_N_sim <- function(n, p, N) {
W <- numeric(N)
for (i in 1:N) {
W[i] <- binomial_sim(n, p)
}
return(W)
}
# Parametry rozkładu dwumianowego
n <- 100
p <- 0.5
N <- 10000
# Generowanie danych
simulated_data <- binomial_N_sim(n, p, N)
# Teoretyczne wartości
theoretical_mean <- n * p
theoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- mean(simulated_data)
empirical_sd <- sd(simulated_data)
cat("Teoretyczna średnia: ", theoretical_mean, "\n")
cat("Teoretyczne odchylenie standardowe: ", theoretical_sd, "\n")
cat("Empiryczna średnia: ", empirical_mean, "\n")
cat("Empiryczne odchylenie standardowe: ", empirical_sd, "\n")
# Teoretyczne prawdopodobieństwa rozkładu dwumianowego
x_vals <- 0:n
theoretical_probs <- dbinom(x_vals, size = n, prob = p) * N
# Histogram wyników symulacji
hist(simulated_data,
breaks = seq(-0.5, n + 0.5, by = 1),
main = "Porównanie symulacji z rozkładem teoretycznym",
xlab = "Liczba sukcesów",
col = "lightblue",
border = "black",
freq = TRUE,
right = FALSE)
# Dodanie teoretycznych wartości
lines(x_vals, theoretical_probs, col = "red", lwd = 2)  # Linia
legend("topright", legend = c("Symulacja", "Teoria"),
fill = c("lightblue", NA), col = c("black", "red"),
lty = c(NA, 1), border = "black")
# Funkcja generująca pojedynczą realizację rozkładu wielomianowego
wielomianowy <- function(n, p) {
k <- length(p)
proby <- sample(1:k, size = n, replace = TRUE, prob = p)
tab <- table(factor(proby, levels = 1:k))
as.vector(tab)
}
# Funkcja wykonująca N prób Monte Carlo dla rozkładu wielomianowego
wielomianowy_value <- function(n, p, N) {
k <- length(p)
W <- replicate(N, wielomianowy(n, p))  # Zamiast pętli wykorzystujemy replicate
result <- rowMeans(W)  # Średnie wartości dla każdej kategorii
return(result)
}
# Parametry symulacji
p <- c(0.5, 0.1, 0.2, 0.2)
n <- 100
N <- 10000
# Testowanie funkcji
simulated_data <- replicate(N, wielomianowy(n, p))
# Teoretyczne wartości
teoretical_mean <- n * p
teoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- rowMeans(simulated_data)
empirical_sd <- apply(simulated_data, 1, sd)
# Wyniki
print("Teoretyczne średnie:")
print(teoretical_mean)
print("Empiryczne średnie:")
print(empirical_mean)
print("Teoretyczne odchylenia standardowe:")
print(teoretical_sd)
print("Empiryczne odchylenia standardowe:")
print(empirical_sd)
# Wizualizacja wyników
barplot(rbind(teoretical_mean, empirical_mean), beside = TRUE, col = c("red", "blue"),
legend = c("Teoretyczne", "Empiryczne"), main = "Porównanie średnich kategorii")
# Parametry symulacji
p <- c(0.5, 0.1, 0.2, 0.2)
n <- 100
N <- 10000
# Testowanie funkcji
simulated_data <- replicate(N, wielomianowy(n, p))
# Teoretyczne wartości
teoretical_mean <- n * p
teoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- rowMeans(simulated_data)
empirical_sd <- apply(simulated_data, 1, sd)
# Wyniki
print("Teoretyczne średnie:")
print(teoretical_mean)
print("Empiryczne średnie:")
print(empirical_mean)
print("Teoretyczne odchylenia standardowe:")
print(teoretical_sd)
print("Empiryczne odchylenia standardowe:")
print(empirical_sd)
# Histogram porównujący rozkład empiryczny z teoretycznym
hist(rowSums(simulated_data), breaks = seq(min(rowSums(simulated_data)), max(rowSums(simulated_data)), by = 1),
col = "lightblue", border = "black", freq = FALSE, main = "Porównanie rozkładu empirycznego i teoretycznego",
xlab = "Liczba sukcesów")
lines(0:n, teoretical_dist, col = "red", lwd = 2)
# Parametry symulacji
p <- c(0.5, 0.1, 0.2, 0.2)
n <- 100
N <- 10000
# Testowanie funkcji
simulated_data <- replicate(N, wielomianowy(n, p))
# Teoretyczne wartości
teoretical_mean <- n * p
teoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- rowMeans(simulated_data)
empirical_sd <- apply(simulated_data, 1, sd)
# Wyniki
print("Teoretyczne średnie:")
print(teoretical_mean)
print("Empiryczne średnie:")
print(empirical_mean)
print("Teoretyczne odchylenia standardowe:")
print(teoretical_sd)
print("Empiryczne odchylenia standardowe:")
print(empirical_sd)
# Histogram porównujący rozkład empiryczny z teoretycznym
hist(colSums(simulated_data), breaks = seq(min(colSums(simulated_data)), max(colSums(simulated_data)), by = 1),
col = "lightblue", border = "black", freq = FALSE, main = "Porównanie rozkładu empirycznego i teoretycznego",
xlab = "Liczba sukcesów")
# Dodanie teoretycznego rozkładu wielomianowego
x_vals <- 0:n
teoretical_probs <- dmultinom(matrix(x_vals, ncol = length(p), byrow = TRUE), size = n, prob = p) * N
# Parametry symulacji
p <- c(0.5, 0.1, 0.2, 0.2)
n <- 100
N <- 10000
# Testowanie funkcji
simulated_data <- replicate(N, wielomianowy(n, p))
# Teoretyczne wartości
teoretical_mean <- n * p
teoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- rowMeans(simulated_data)
empirical_sd <- apply(simulated_data, 1, sd)
# Wyniki
print("Teoretyczne średnie:")
print(teoretical_mean)
print("Empiryczne średnie:")
print(empirical_mean)
print("Teoretyczne odchylenia standardowe:")
print(teoretical_sd)
print("Empiryczne odchylenia standardowe:")
print(empirical_sd)
# Histogram porównujący rozkład empiryczny z teoretycznym
df <- data.frame(t(simulated_data))
category_counts <- apply(df, 2, sum)
hist(category_counts, breaks = seq(min(category_counts), max(category_counts), by = 1),
col = "lightblue", border = "black", freq = FALSE, main = "Porównanie rozkładu empirycznego i teoretycznego",
xlab = "Liczba sukcesów")
# Teoretyczny rozkład wielomianowy
x_vals <- 0:n
teoretical_probs <- dpois(x_vals, lambda = n * p) * N
lines(x_vals, teoretical_probs, col = "red", lwd = 2)
legend("topright", legend = c("Empiryczny", "Teoretyczny"), col = c("lightblue", "red"),
fill = c("lightblue", NA), lty = c(NA, 1), border = "black")
# Parametry symulacji
p <- c(0.5, 0.1, 0.2, 0.2)
n <- 100
N <- 10000
# Testowanie funkcji
simulated_data <- replicate(N, wielomianowy(n, p))
# Teoretyczne wartości
teoretical_mean <- n * p
teoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- rowMeans(simulated_data)
empirical_sd <- apply(simulated_data, 1, sd)
# Wyniki
print("Teoretyczne średnie:")
print(teoretical_mean)
print("Empiryczne średnie:")
print(empirical_mean)
print("Teoretyczne odchylenia standardowe:")
print(teoretical_sd)
print("Empiryczne odchylenia standardowe:")
print(empirical_sd)
# Parametry symulacji
p <- c(0.5, 0.1, 0.2, 0.2)
n <- 100
N <- 10000
# Testowanie funkcji
simulated_data <- replicate(N, wielomianowy(n, p))
# Teoretyczne wartości
teoretical_mean <- n * p
teoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- rowMeans(simulated_data)
empirical_sd <- apply(simulated_data, 1, sd)
cat("Teoretyczna średnia: ", theoretical_mean, "\n")
cat("Teoretyczne odchylenie standardowe: ", theoretical_sd, "\n")
cat("Empiryczna średnia: ", empirical_mean, "\n")
cat("Empiryczne odchylenie standardowe: ", empirical_sd, "\n")
# Część III i IV
## Zadanie 6
```{r, echo=FALSE}
# Parametry symulacji
p <- c(0.5, 0.1, 0.2, 0.2)
n <- 100
N <- 10000
# Testowanie funkcji
simulated_data <- replicate(N, wielomianowy(n, p))
# Teoretyczne wartości
teoretical_mean <- n * p
teoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- rowMeans(simulated_data)
empirical_sd <- apply(simulated_data, 1, sd)
cat("Teoretyczna średnia: ", theoretical_mean, "\n")
cat("Teoretyczne odchylenie standardowe: ", theoretical_sd, "\n")
cat("Empiryczna średnia: ", empirical_mean, "\n")
cat("Empiryczne odchylenie standardowe: ", empirical_sd, "\n")
# Parametry symulacji
p <- c(0.5, 0.1, 0.2, 0.2)
n <- 100
N <- 10000
# Testowanie funkcji
simulated_data <- replicate(N, wielomianowy(n, p))
# Teoretyczne wartości
teoretical_mean <- n * p
teoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- rowMeans(simulated_data)
empirical_sd <- apply(simulated_data, 1, sd)
cat("Teoretyczna średnia: ", theoretical_mean, "\n")
cat("Teoretyczne odchylenie standardowe: ", theoretical_sd, "\n")
cat("Empiryczna średnia: ", empirical_mean, "\n")
cat("Empiryczne odchylenie standardowe: ", empirical_sd, "\n")
# Parametry symulacji
p <- c(0.5, 0.1, 0.2, 0.2)
n <- 100
N <- 10000
# Testowanie funkcji
simulated_data <- replicate(N, wielomianowy(n, p))
# Teoretyczne wartości
teoretical_mean <- n * p
teoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- rowMeans(simulated_data)
empirical_sd <- apply(simulated_data, 1, sd)
cat("Teoretyczna średnia: ", theoretical_mean, "\n")
cat("Teoretyczne odchylenie standardowe: ", theoretical_sd, "\n")
cat("Empiryczna średnia: ", empirical_mean, "\n")
cat("Empiryczne odchylenie standardowe: ", empirical_sd, "\n")
# Parametry symulacji
p <- c(0.5, 0.1, 0.2, 0.2)
n <- 100
N <- 10000
# Testowanie funkcji
simulated_data <- wielomianowy_value(n, p, N)
# Teoretyczne wartości
teoretical_mean <- n * p
teoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- rowMeans(simulated_data)
# Funkcja generująca pojedynczą realizację rozkładu wielomianowego
wielomianowy <- function(n, p) {
k <- length(p)
proby <- sample(1:k, size = n, replace = TRUE, prob = p)
tab <- table(factor(proby, levels = 1:k))
as.vector(tab)
}
# Funkcja wykonująca N prób Monte Carlo dla rozkładu wielomianowego
wielomianowy_value <- function(n, p, N) {
k <- length(p)
W <- replicate(N, wielomianowy(n, p))  # Zamiast pętli wykorzystujemy replicate
result <- W # Średnie wartości dla każdej kategorii
return(result)
}
# Parametry symulacji
p <- c(0.5, 0.1, 0.2, 0.2)
n <- 100
N <- 10000
# Testowanie funkcji
simulated_data <- wielomianowy_value(n, p, N)
# Teoretyczne wartości
teoretical_mean <- n * p
teoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- rowMeans(simulated_data)
empirical_sd <- apply(simulated_data, 1, sd)
cat("Teoretyczna średnia: ", theoretical_mean, "\n")
cat("Teoretyczne odchylenie standardowe: ", theoretical_sd, "\n")
cat("Empiryczna średnia: ", empirical_mean, "\n")
cat("Empiryczne odchylenie standardowe: ", empirical_sd, "\n")
# Parametry symulacji
p <- c(0.5, 0.1, 0.2, 0.2)
n <- 100
N <- 10000
# Testowanie funkcji
simulated_data <- wielomianowy_value(n, p, N)
# Teoretyczne wartości
teoretical_mean <- n * p
teoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- rowMeans(simulated_data)
empirical_sd <- apply(simulated_data, 1, sd)
cat("Teoretyczna średnia: ", theoretical_mean, "\n")
cat("Teoretyczne odchylenie standardowe: ", theoretical_sd, "\n")
cat("Empiryczna średnia: ", empirical_mean, "\n")
cat("Empiryczne odchylenie standardowe: ", empirical_sd, "\n")
# Parametry symulacji
p <- c(0.5, 0.1, 0.2, 0.2)
n <- 100
N <- 10000
# Testowanie funkcji
simulated_data <- wielomianowy_value(n, p, N)
# Teoretyczne wartości
teoretical_mean <- n * p
teoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- rowMeans(simulated_data)
empirical_sd <- apply(simulated_data, 1, sd)
cat("Teoretyczna średnia: ", teoretical_mean, "\n")
cat("Teoretyczne odchylenie standardowe: ", teoretical_sd, "\n")
cat("Empiryczna średnia: ", empirical_mean, "\n")
cat("Empiryczne odchylenie standardowe: ", empirical_sd, "\n")
# Funkcja generująca pojedynczą realizację rozkładu wielomianowego
wielomianowy_sim <- function(n, p) {
k <- length(p)
proby <- sample(1:k, size = n, replace = TRUE, prob = p)
tab <- table(factor(proby, levels = 1:k))
as.vector(tab)
}
# Funkcja wykonująca N prób Monte Carlo dla rozkładu wielomianowego
wielomianowy_N_sim <- function(n, p, N) {
k <- length(p)
W <- replicate(N, wielomianowy_sim(n, p))
result <- W
return(result)
}
# Parametry symulacji
p <- c(0.5, 0.1, 0.2, 0.2)
n <- 100
N <- 10000
# Testowanie funkcji
simulated_data <- wielomianowy_N_sim(n, p, N)
# Teoretyczne wartości
teoretical_mean <- n * p
teoretical_sd <- sqrt(n * p * (1 - p))
# Empiryczne wartości
empirical_mean <- rowMeans(simulated_data)
empirical_sd <- apply(simulated_data, 1, sd)
cat("Teoretyczna średnia: ", teoretical_mean, "\n")
cat("Teoretyczne odchylenie standardowe: ", teoretical_sd, "\n")
cat("Empiryczna średnia: ", empirical_mean, "\n")
cat("Empiryczne odchylenie standardowe: ", empirical_sd, "\n")
